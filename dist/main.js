!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=function(){function t(){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.constructor===t)throw new TypeError('Abstract class "'.concat(this.constructor.name,'" cannot be instantiated directly'))}var e,r,o;return e=t,(r=[{key:"update",value:function(t){throw new Error("Unimplemented method")}}])&&n(e.prototype,r),o&&n(e,o),t}();function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function y(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=b(t);if(e){var o=b(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return p(this,r)}}function p(t,e){return!e||"object"!==a(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function b(t){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var h=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(i,t);var e,r,n,o=y(i);function i(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{artists:[],earliestReleaseYear:0,latestReleaseYear:0};return c(this,i),(t=o.call(this))._state=e,t}return e=i,(r=[{key:"addArtists",value:function(t){var e;(e=this._state.artists).push.apply(e,u(t)),this._sortArtistsChronologically(),this._setEarliestAndLatestReleaseYear(),this.notifyObservers(this._state)}},{key:"_sortArtistsChronologically",value:function(){this._state.artists.sort((function(t,e){return t.earliestReleaseYear-e.earliestReleaseYear}))}},{key:"_setEarliestAndLatestReleaseYear",value:function(){this._state.earliestReleaseYear=this._state.artists[0].earliestReleaseYear;var t=this.artists.length-1;this._state.latestReleaseYear=this._state.artists[t].latestReleaseYear}},{key:"artists",get:function(){return this._state.artists}},{key:"earliestReleaseYear",get:function(){return this._state.earliestReleaseYear}},{key:"latestReleaseYear",get:function(){return this._state.latestReleaseYear}}])&&l(e.prototype,r),n&&l(e,n),i}(function(){function t(){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.constructor===t)throw new TypeError('Abstract class "'.concat(this.constructor.name,'" cannot be instantiated directly'));this.observers=[]}var e,r,n;return e=t,(r=[{key:"subscribe",value:function(t){t instanceof o&&this.observers.push(t)}},{key:"unsubscribe",value:function(t){var e=this.observers.indexOf(t);e>=0&&this.observers.splice(e,1)}},{key:"notifyObservers",value:function(t){for(var e=0;e<this.observers.length;e++)this.observers[e].update(t)}}])&&i(e.prototype,r),n&&i(e,n),t}());function v(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],n=document.createElement(t);for(var o in e)n.setAttribute(o,e[o]);return r.forEach((function(t){"string"==typeof t?n.appendChild(document.createTextNode(t)):n.appendChild(t)})),n}function d(t){var e={class:"timeline-axis-year"};return t%10==0&&(e.color="#1ed760"),v("div",e,[t.toString()])}function m(t){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _(t,e){return(_=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function w(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=R(t);if(e){var o=R(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return O(this,r)}}function O(t,e){return!e||"object"!==m(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function R(t){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}new(function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_(t,e)}(i,t);var e,r,n,o=w(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this))._appState=t,e}return e=i,(r=[{key:"render",value:function(){for(var t=v("div",{class:"timeline-axis-first-col"}),e=this._generateArrayOfYears(),r=[],n=0;n<e.length;n++)r.push(d(e[n]));var o=v("div",{id:"timeline-axis",class:"timeline-axis"},[t].concat(r));document.getElementById("timeline-axis").replaceWith(o)}},{key:"update",value:function(){this.render()}},{key:"_generateArrayOfYears",value:function(){var t=0==this._appState.latestReleaseYear?new Date(Date.now()).getFullYear():null,e=null==t?this._appState.latestReleaseYear:t-1,r=null==t?this._appState.earliestReleaseYear:t-10,n=e-r+2;return Array.from(new Array(n),(function(t,e){return e+r}))}}])&&g(e.prototype,r),n&&g(e,n),i}(o))(new h).render()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,